// services/exportFeedbackSummaryToPDF.js
import { jsPDF } from 'jspdf';

const exportFeedbackSummaryToPDF = (filteredSummaries, generatedBy, role, logoBase64) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 15;
  let yPosition = margin;
  const lineHeight = 7;

  // User information + logo
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.setFont('helvetica', 'normal');

  // Display "Generated by" and "Role" one below the other
  const generatedByY = yPosition; // Save yPosition for logo alignment
  doc.text(`Generated by: ${generatedBy || 'N/A'}`, margin, yPosition);
  yPosition += 5; // Space between "Generated by" and "Role"
  doc.text(`Role: ${role || 'N/A'}`, margin, yPosition);

  // Add logo on the right, aligned with "Generated by"
  if (logoBase64) {
    try {
      const logoWidth = 28;
      const logoHeight = 28;
      const logoX = pageWidth - margin - logoWidth;
      const logoY = generatedByY - 5; // Align with "Generated by"
      doc.addImage(logoBase64, 'PNG', logoX, logoY, logoWidth, logoHeight);
    } catch (error) {
      console.error('Error adding logo:', error);
    }
  }

  // "Generated on" immediately below "Generated by" and "Role"
  yPosition += 5; // Small space between "Role" and "Generated on"
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const today = new Date();
  const formattedDate = today.toLocaleDateString('ro-RO');
  doc.text(`Generated on: ${formattedDate}`, margin, yPosition); 

  // Title below, with more distance
  yPosition += 20; // Large space between "Generated on" and title
  doc.setFontSize(18);
  doc.setTextColor(40);
  doc.setFont('helvetica', 'bold');
  doc.text('Player Feedback Summary', pageWidth / 2, yPosition, { align: 'center' });

  yPosition += 15; // Space below title

  // Table header
  const columnPositions = {
    player: margin,
    average: margin + 50,
    feedbackCount: margin + 80,
    summary: margin + 115
  };

  const tableHeader = () => {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(50);

    doc.text('Player', columnPositions.player, yPosition);
    doc.text('Average', columnPositions.average, yPosition);
    doc.text('Feedback Count', columnPositions.feedbackCount, yPosition);
    doc.text('Summary', columnPositions.summary, yPosition);

    yPosition += 5;
    doc.setLineWidth(0.5);
    doc.setDrawColor(180);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;
  };

  tableHeader();

  // Table data
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(70);

  filteredSummaries.forEach((summary, index) => {
    if (yPosition > pageHeight - margin - 20) {
      doc.addPage();
      yPosition = margin + 10;
      tableHeader();
    }

    const playerName = summary.playerName || 'N/A';
    const averageSatisfactionValue = parseFloat(summary.averageSatisfaction);
    const averageSatisfaction = isNaN(averageSatisfactionValue)
      ? 'N/A'
      : averageSatisfactionValue.toFixed(1);
    const feedbackCount = summary.feedbackCount?.toString() || '0';
    const summaryText = summary.summary || 'N/A';

    const splitSummary = doc.splitTextToSize(summaryText, pageWidth - columnPositions.summary - margin);

    doc.text(playerName, columnPositions.player, yPosition);
    doc.text(averageSatisfaction, columnPositions.average, yPosition);
    doc.text(feedbackCount, columnPositions.feedbackCount, yPosition);
    doc.text(splitSummary, columnPositions.summary, yPosition);

    // Calculate content height for proper line positioning
    const contentHeight = Math.max(lineHeight, splitSummary.length * lineHeight *0.8);
    yPosition += contentHeight;

    // Add separator line with better positioning - moved up from original position
    doc.setLineWidth(0.3);
    doc.setDrawColor(180);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    
    // Add spacing after the line
    yPosition += 10;
  });

  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(`${i}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
  }

  // Filename with date
  const dd = String(today.getDate()).padStart(2, '0');
  const mm = String(today.getMonth() + 1).padStart(2, '0');
  const yyyy = today.getFullYear();
  const dateString = `${dd}${mm}${yyyy}`;
  const cleanGeneratedBy = (generatedBy || 'unknown').toLowerCase().trim().replace(/\s+/g, '_')

  const fileName = `player_feedback_summary_${cleanGeneratedBy}_${dateString}.pdf`;
  // Save PDF
  doc.save(fileName);
};

export default exportFeedbackSummaryToPDF;